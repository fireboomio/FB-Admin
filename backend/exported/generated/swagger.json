{
  "components": {
    "schemas": {
      "main_Admin_userRelationFilter": {
        "properties": {
          "is": {
            "$ref": "#/components/schemas/main_admin_userWhereInput"
          },
          "isNot": {
            "$ref": "#/components/schemas/main_admin_userWhereInput"
          }
        },
        "type": "object"
      },
      "main_Case_categoryRelationFilter": {
        "properties": {
          "is": {
            "$ref": "#/components/schemas/main_case_categoryWhereInput"
          },
          "isNot": {
            "$ref": "#/components/schemas/main_case_categoryWhereInput"
          }
        },
        "type": "object"
      },
      "main_Case_postListRelationFilter": {
        "properties": {
          "every": {
            "$ref": "#/components/schemas/main_case_postWhereInput"
          },
          "none": {
            "$ref": "#/components/schemas/main_case_postWhereInput"
          },
          "some": {
            "$ref": "#/components/schemas/main_case_postWhereInput"
          }
        },
        "type": "object"
      },
      "main_DateTimeNullableFilter": {
        "properties": {
          "equals": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedDateTimeNullableFilter"
          },
          "notIn": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "main_IntFilter": {
        "properties": {
          "equals": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "in": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedIntFilter"
          },
          "notIn": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "main_IntNullableFilter": {
        "properties": {
          "equals": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "in": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedIntNullableFilter"
          },
          "notIn": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "main_NestedDateTimeNullableFilter": {
        "properties": {
          "equals": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedDateTimeNullableFilter"
          },
          "notIn": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "main_NestedIntFilter": {
        "properties": {
          "equals": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "in": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedIntFilter"
          },
          "notIn": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "main_NestedIntNullableFilter": {
        "properties": {
          "equals": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "in": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedIntNullableFilter"
          },
          "notIn": {
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "main_NestedStringFilter": {
        "properties": {
          "contains": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "equals": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedStringFilter"
          },
          "notIn": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startsWith": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_NestedStringNullableFilter": {
        "properties": {
          "contains": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "equals": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedStringNullableFilter"
          },
          "notIn": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startsWith": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_StringFilter": {
        "properties": {
          "contains": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "equals": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedStringFilter"
          },
          "notIn": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startsWith": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_StringNullableFilter": {
        "properties": {
          "contains": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "equals": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "not": {
            "$ref": "#/components/schemas/main_NestedStringNullableFilter"
          },
          "notIn": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startsWith": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_admin_apilogOrderByWithRelationInput": {
        "properties": {
          "code": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "createdAt": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "deletedAt": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "id": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "ip": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "method": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "path": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "ua": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "updatedAt": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "userId": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "userName": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_admin_menu_roleCreateManyInput": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "menu_id": {
            "type": "integer"
          },
          "role_id": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "main_admin_permissionCreateManyInput": {
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "enabled": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_admin_roleOrderByWithRelationInput": {
        "properties": {
          "code": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "id": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "remark": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_admin_roleWhereInput": {
        "properties": {
          "AND": {
            "$ref": "#/components/schemas/main_admin_roleWhereInput"
          },
          "NOT": {
            "$ref": "#/components/schemas/main_admin_roleWhereInput"
          },
          "OR": {
            "items": {
              "$ref": "#/components/schemas/main_admin_roleWhereInput"
            },
            "type": "array"
          },
          "code": {
            "$ref": "#/components/schemas/main_StringFilter"
          },
          "id": {
            "$ref": "#/components/schemas/main_IntFilter"
          },
          "remark": {
            "$ref": "#/components/schemas/main_StringFilter"
          }
        },
        "type": "object"
      },
      "main_admin_userOrderByWithRelationInput": {
        "properties": {
          "avatar": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "case_post": {
            "$ref": "#/components/schemas/main_case_postOrderByRelationAggregateInput"
          },
          "country_code": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "created_at": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "id": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "name": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "password": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "password_salt": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "password_type": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "phone": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "user_id": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_admin_userWhereInput": {
        "properties": {
          "AND": {
            "$ref": "#/components/schemas/main_admin_userWhereInput"
          },
          "NOT": {
            "$ref": "#/components/schemas/main_admin_userWhereInput"
          },
          "OR": {
            "items": {
              "$ref": "#/components/schemas/main_admin_userWhereInput"
            },
            "type": "array"
          },
          "avatar": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "case_post": {
            "$ref": "#/components/schemas/main_Case_postListRelationFilter"
          },
          "country_code": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "created_at": {
            "$ref": "#/components/schemas/main_DateTimeNullableFilter"
          },
          "id": {
            "$ref": "#/components/schemas/main_IntFilter"
          },
          "name": {
            "$ref": "#/components/schemas/main_StringFilter"
          },
          "password": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "password_salt": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "password_type": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "phone": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "user_id": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          }
        },
        "type": "object"
      },
      "main_case_categoryWhereInput": {
        "properties": {
          "AND": {
            "$ref": "#/components/schemas/main_case_categoryWhereInput"
          },
          "NOT": {
            "$ref": "#/components/schemas/main_case_categoryWhereInput"
          },
          "OR": {
            "items": {
              "$ref": "#/components/schemas/main_case_categoryWhereInput"
            },
            "type": "array"
          },
          "case_post": {
            "$ref": "#/components/schemas/main_Case_postListRelationFilter"
          },
          "id": {
            "$ref": "#/components/schemas/main_IntFilter"
          },
          "name": {
            "$ref": "#/components/schemas/main_StringFilter"
          }
        },
        "type": "object"
      },
      "main_case_menuOrderByWithRelationInput": {
        "properties": {
          "api_id": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "create_time": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "icon": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "id": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "is_bottom": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "label": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "level": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "menu_type": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "name": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "parentId": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "path": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "perms": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          },
          "sort": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_case_menuWhereInput": {
        "properties": {
          "AND": {
            "$ref": "#/components/schemas/main_case_menuWhereInput"
          },
          "NOT": {
            "$ref": "#/components/schemas/main_case_menuWhereInput"
          },
          "OR": {
            "items": {
              "$ref": "#/components/schemas/main_case_menuWhereInput"
            },
            "type": "array"
          },
          "api_id": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "create_time": {
            "$ref": "#/components/schemas/main_DateTimeNullableFilter"
          },
          "icon": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "id": {
            "$ref": "#/components/schemas/main_IntFilter"
          },
          "is_bottom": {
            "$ref": "#/components/schemas/main_IntFilter"
          },
          "label": {
            "$ref": "#/components/schemas/main_StringFilter"
          },
          "level": {
            "$ref": "#/components/schemas/main_IntFilter"
          },
          "menu_type": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "name": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "parentId": {
            "$ref": "#/components/schemas/main_IntNullableFilter"
          },
          "path": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "perms": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "sort": {
            "$ref": "#/components/schemas/main_IntFilter"
          }
        },
        "type": "object"
      },
      "main_case_postOrderByRelationAggregateInput": {
        "properties": {
          "_count": {
            "enum": [
              "asc",
              "desc"
            ],
            "title": "main_SortOrder",
            "type": "string"
          }
        },
        "type": "object"
      },
      "main_case_postWhereInput": {
        "properties": {
          "AND": {
            "$ref": "#/components/schemas/main_case_postWhereInput"
          },
          "NOT": {
            "$ref": "#/components/schemas/main_case_postWhereInput"
          },
          "OR": {
            "items": {
              "$ref": "#/components/schemas/main_case_postWhereInput"
            },
            "type": "array"
          },
          "admin_user": {
            "$ref": "#/components/schemas/main_Admin_userRelationFilter"
          },
          "auth": {
            "$ref": "#/components/schemas/main_IntNullableFilter"
          },
          "author": {
            "$ref": "#/components/schemas/main_StringFilter"
          },
          "case_category": {
            "$ref": "#/components/schemas/main_Case_categoryRelationFilter"
          },
          "cate": {
            "$ref": "#/components/schemas/main_IntNullableFilter"
          },
          "content": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "id": {
            "$ref": "#/components/schemas/main_IntFilter"
          },
          "poster": {
            "$ref": "#/components/schemas/main_StringNullableFilter"
          },
          "published_at": {
            "$ref": "#/components/schemas/main_DateTimeNullableFilter"
          },
          "title": {
            "$ref": "#/components/schemas/main_StringFilter"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "JWT": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "url": "https://fireboom.io"
    },
    "description": "Fireboom swagger3.0",
    "title": "Fireboom swagger3.0",
    "version": "0.1.1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/auth/cookie/user": {
      "get": {
        "description": "获取用户信息",
        "operationId": "/auth/cookie/user",
        "responses": {},
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /auth/cookie/user",
        "tags": [
          "Platform-User"
        ]
      }
    },
    "/auth/cookie/user/logout": {
      "get": {
        "description": "用户登出",
        "operationId": "/auth/cookie/user/logout",
        "parameters": [
          {
            "in": "query",
            "name": "logout_openid_connect_provider",
            "schema": {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          }
        ],
        "responses": null,
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /auth/cookie/user/logout",
        "tags": [
          "Platform-User"
        ]
      }
    },
    "/operations/Casdoor/GetRolesById": {
      "get": {
        "description": "```graphql\nquery MyQuery($userId: String!, $id: Int @internal, $roleId: Int @internal) {\n  data: main_findFirstadmin_user(where: {user_id: {equals: $userId}}) @transform(get: \"_join.main_findManyadmin_role_user\") {\n    id @export(as: \"id\")\n    _join {\n      main_findManyadmin_role_user(where: {user_id: {equals: $id}}) @transform(get: \"[]._join\") {\n        role_id @export(as: \"roleId\")\n        _join @transform(get: \"main_findFirstadmin_role.code\") {\n          main_findFirstadmin_role(where: {id: {equals: $roleId}}) {\n            code\n          }\n        }\n      }\n    }\n  }\n} \n```",
        "operationId": "/operations/Casdoor/GetRolesById",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Casdoor/GetRolesById",
        "tags": [
          "Casdoor"
        ]
      }
    },
    "/operations/Casdoor/GetSMSProvider": {
      "get": {
        "description": "```graphql\nquery MyQuery @rbac(requireMatchAny: [admin]) {\n  data:main_findManyadmin_provider {\n    client_id\n    client_secret\n    created_time\n    name\n    owner\n    sign_name\n    template_code\n    type\n  }\n}\n```",
        "operationId": "/operations/Casdoor/GetSMSProvider",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "client_id": {
                                "type": "string"
                              },
                              "client_secret": {
                                "type": "string"
                              },
                              "created_time": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "sign_name": {
                                "type": "string"
                              },
                              "template_code": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "owner"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/Casdoor/GetSMSProvider",
        "tags": [
          "Casdoor"
        ]
      }
    },
    "/operations/Casdoor/Login": {
      "post": {
        "description": "```graphql\nmutation Login($code: String = \"\", $password: String = \"\", $countryCode: String = \"CN\", $loginType: String = \"\", $phone: String = \"\", $username: String = \"\") {\n  casdoor_apiLogin(\n    POSTApiLoginInput: {code: $code, password: $password, loginType: $loginType, username: $username, phone: $phone, countryCode: $countryCode}\n  ) {\n    msg\n    success\n    data {\n      accessToken\n      expireIn\n      refreshToken\n    }\n  }\n} \n```",
        "operationId": "/operations/Casdoor/Login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "countryCode": {
                    "type": "string"
                  },
                  "loginType": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "casdoor_apiLogin": {
                          "properties": {
                            "data": {
                              "properties": {
                                "accessToken": {
                                  "type": "string"
                                },
                                "expireIn": {
                                  "type": "integer"
                                },
                                "refreshToken": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "msg": {
                              "type": "string"
                            },
                            "success": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/Casdoor/Login",
        "tags": [
          "Casdoor"
        ]
      }
    },
    "/operations/Casdoor/RefreshToken": {
      "post": {
        "description": "```graphql\nmutation MyQuery($refreshToken: String!) {\n  data: casdoor_apiRefreshToken(\n    POSTApiRefresh_tokenInput: {refresh_token: $refreshToken}\n  ) {\n    msg\n    success\n    data {\n      refreshToken\n      accessToken\n      expireIn\n    }\n  }\n}\n```",
        "operationId": "/operations/Casdoor/RefreshToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                },
                "required": [
                  "refreshToken"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "data": {
                              "properties": {
                                "accessToken": {
                                  "type": "string"
                                },
                                "expireIn": {
                                  "type": "integer"
                                },
                                "refreshToken": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "msg": {
                              "type": "string"
                            },
                            "success": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/Casdoor/RefreshToken",
        "tags": [
          "Casdoor"
        ]
      }
    },
    "/operations/Casdoor/SendCode": {
      "post": {
        "description": "```graphql\nmutation MyQuery($dest: String!, $countryCode: String = \"CN\") {\n  data: casdoor_apiSendVerificationCode(\n    POSTApiSend_verification_codeInput: {dest: $dest, countryCode: $countryCode}\n  ) {\n    msg\n  }\n}\n```",
        "operationId": "/operations/Casdoor/SendCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "countryCode": {
                    "type": "string"
                  },
                  "dest": {
                    "type": "string"
                  }
                },
                "required": [
                  "dest"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "msg": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/Casdoor/SendCode",
        "tags": [
          "Casdoor"
        ]
      }
    },
    "/operations/Casdoor/UpdateSMSProvider": {
      "post": {
        "description": "```graphql\nmutation MyQuery($clientId: String!, $clientSecret: String!, $signName: String!, $templateCode: String!) @rbac(requireMatchAny: [admin, user]) {\n  casdoor_apiUpdateProvider(\n    POSTApiUpdate_providerInput: {clientId: $clientId, clientSecret: $clientSecret, signName: $signName, templateCode: $templateCode}\n  ) {\n    msg\n    status\n  }\n}\n```",
        "operationId": "/operations/Casdoor/UpdateSMSProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "signName": {
                    "type": "string"
                  },
                  "templateCode": {
                    "type": "string"
                  }
                },
                "required": [
                  "clientId",
                  "clientSecret",
                  "signName",
                  "templateCode"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "casdoor_apiUpdateProvider": {
                          "properties": {
                            "msg": {
                              "type": "string"
                            },
                            "status": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/Casdoor/UpdateSMSProvider",
        "tags": [
          "Casdoor"
        ]
      }
    },
    "/operations/Post/CreateCategory": {
      "post": {
        "description": "```graphql\nmutation MyQuery($name: String = \"\",) {\n  data:main_createOnecase_category(data: {name: $name}) {\n    id\n    name\n  }\n}\n```",
        "operationId": "/operations/Post/CreateCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/Post/CreateCategory",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/CreateOne": {
      "post": {
        "description": "```graphql\nmutation CreateOnePost($title: String!, $poster: String, $content: String, $publishedAt: DateTime, $username: String!, $userId: Int !, $cateId: Int !) @rbac(requireMatchAny: [user, admin]) {\n  data: main_createOnecase_post(\n    data: {title: $title, poster: $poster, published_at: $publishedAt, author: $username, content: $content, admin_user: {connect: {id: $userId}}, case_category: {connect: {id: $cateId}}}\n  ) {\n    id\n    title\n    poster\n    published_at\n    author\n    case_category {\n      id\n    }\n  }\n}\n```",
        "operationId": "/operations/Post/CreateOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "cateId": {
                    "type": "integer"
                  },
                  "content": {
                    "type": "string"
                  },
                  "poster": {
                    "type": "string"
                  },
                  "publishedAt": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "integer"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "username",
                  "userId",
                  "cateId"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "author": {
                              "type": "string"
                            },
                            "case_category": {
                              "properties": {
                                "id": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "poster": {
                              "type": "string"
                            },
                            "published_at": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "title",
                            "author"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/Post/CreateOne",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/DeleteCategory": {
      "post": {
        "description": "```graphql\nmutation MyQuery($id: Int = 10) {\n  data:main_deleteOnecase_category(where: {id: $id}) {\n    id\n    name\n  }\n}\n```",
        "operationId": "/operations/Post/DeleteCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/Post/DeleteCategory",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/DeleteMany": {
      "post": {
        "description": "```graphql\nmutation DeleteManyPost ($ids: [Int]!) @rbac(requireMatchAny: [user,eeee,admin,abc,abc32]) {\n\tdata: main_deleteManycase_post(where: {id:{in:$ids}}) {\n\t\tcount\n\t}\n}\n\n```",
        "operationId": "/operations/Post/DeleteMany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ids": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "ids"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/Post/DeleteMany",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/DeleteOne": {
      "post": {
        "description": "```graphql\nmutation DeleteOnePost ($id: Int!) @rbac(requireMatchAny: [user,admin]) {\n\tdata: main_deleteOnecase_post(where: {id:$id}) {\n\t\tid\n\t}\n}\n\n```",
        "operationId": "/operations/Post/DeleteOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/Post/DeleteOne",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/GetCategory": {
      "get": {
        "description": "```graphql\nquery MyQuery($take: Int = 10, $skip: Int = 0) {\n  data:main_findManycase_category(skip: $skip, take: $take) {\n    id\n    name\n    case_post {\n      author\n      content\n      id\n      published_at\n      poster\n      title\n    }\n  }\n}\n```",
        "operationId": "/operations/Post/GetCategory",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "case_post": {
                                "items": {
                                  "properties": {
                                    "author": {
                                      "type": "string"
                                    },
                                    "content": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "poster": {
                                      "type": "string"
                                    },
                                    "published_at": {
                                      "type": "string"
                                    },
                                    "title": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "author",
                                    "id",
                                    "title"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Post/GetCategory",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/GetLikeList": {
      "get": {
        "description": "```graphql\nquery MyQuery($author: String = \"\", $content: String = \"\", $title: String = \"\", $id: Int ) {\n  data:main_findManycase_post(\n    where: {author: {contains: $author, endsWith: \"\"}, content: {contains: $content, endsWith: \"\"}, title: {contains: $title, endsWith: \"\"}}\n  ) {\n    author\n    content\n    id\n    published_at\n    title\n    poster\n    case_category {\n      name\n      id\n    }\n  }\n  data1:main_findUniquecase_post(where: {id: $id}) {\n    author\n    content\n    id\n    published_at\n    title\n    poster\n    case_category {\n      id\n      name\n    }\n  }\n}\n```",
        "operationId": "/operations/Post/GetLikeList",
        "parameters": [
          {
            "in": "query",
            "name": "author",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "content",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "author": {
                                "type": "string"
                              },
                              "case_category": {
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name",
                                  "id"
                                ],
                                "type": "object"
                              },
                              "content": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "poster": {
                                "type": "string"
                              },
                              "published_at": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "author",
                              "id",
                              "title"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "data1": {
                          "properties": {
                            "author": {
                              "type": "string"
                            },
                            "case_category": {
                              "properties": {
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "name"
                              ],
                              "type": "object"
                            },
                            "content": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "poster": {
                              "type": "string"
                            },
                            "published_at": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "author",
                            "id",
                            "title"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Post/GetLikeList",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/GetList": {
      "get": {
        "description": "```graphql\nquery GetPostList($take: Int = 10, $skip: Int = 0, $query: main_case_postWhereInput) @rbac(requireMatchAny: [eeee, admin, abc, abc32]) {\n  data: main_findManycase_post(\n    skip: $skip\n    take: $take\n    where: {AND: $query}\n    orderBy: {title: asc}\n  ) {\n    id\n    title\n    poster\n    published_at\n    author\n    content\n    case_category {\n      id\n      name\n    }\n  }\n  total: main_aggregatecase_post(where: {AND: $query}) @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n}\n```",
        "operationId": "/operations/Post/GetList",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "$ref": "#/components/schemas/main_case_postWhereInput"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "author": {
                                "type": "string"
                              },
                              "case_category": {
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "name"
                                ],
                                "type": "object"
                              },
                              "content": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "poster": {
                                "type": "string"
                              },
                              "published_at": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "title",
                              "author"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "total": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/Post/GetList",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/GetOne": {
      "get": {
        "description": "```graphql\nquery GetOnePost($id: Int!) @rbac(requireMatchAny: [user, eeee, admin, abc, abc32]) {\n  data: main_findFirstcase_post(where: {id: {equals: $id}}) {\n    id\n    title\n    poster\n    published_at\n    author\n    content\n    case_category {\n      id\n      name\n    }\n    admin_user {\n      id\n      name\n    }\n  }\n}\n```",
        "operationId": "/operations/Post/GetOne",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "admin_user": {
                              "properties": {
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "name"
                              ],
                              "type": "object"
                            },
                            "author": {
                              "type": "string"
                            },
                            "case_category": {
                              "properties": {
                                "id": {
                                  "type": "integer"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "name"
                              ],
                              "type": "object"
                            },
                            "content": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "poster": {
                              "type": "string"
                            },
                            "published_at": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "title",
                            "author"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/Post/GetOne",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/GetPostByAuthor": {
      "post": {
        "description": "```graphql\nmutation MyQuery($id: Int = 10, $name: String = \"\") {\n data:main_updateOnecase_category(data: {name: {set: $name}}, where: {id: $id}) {\n    id\n    name\n  }\n}\n```",
        "operationId": "/operations/Post/GetPostByAuthor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/Post/GetPostByAuthor",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/GetPostByCate": {
      "get": {
        "description": "```graphql\nquery MyQuery($equals: String!) @rbac(requireMatchAny: [admin]) {\n  data: main_findManycase_category(where: {name: {equals: $equals}}) @transform(get: \"[].case_post\") {\n    case_post {\n      author\n      cate\n      content\n      poster\n      id\n      title\n      published_at\n    }\n  }\n}\n```",
        "operationId": "/operations/Post/GetPostByCate",
        "parameters": [
          {
            "in": "query",
            "name": "equals",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "author": {
                                "type": "string"
                              },
                              "cate": {
                                "type": "integer"
                              },
                              "content": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "poster": {
                                "type": "string"
                              },
                              "published_at": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "author",
                              "id",
                              "title"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/Post/GetPostByCate",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/UpdateCategory": {
      "get": {
        "description": "```graphql\nquery MyQuery($id: Int = 10) {\n  data:main_findManyadmin_user(where: {id: {equals: $id}}) {\n    case_post {\n      cate\n      content\n      id\n      poster\n      published_at\n      title\n    }\n  }\n} \n```",
        "operationId": "/operations/Post/UpdateCategory",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "case_post": {
                                "items": {
                                  "properties": {
                                    "cate": {
                                      "type": "integer"
                                    },
                                    "content": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "poster": {
                                      "type": "string"
                                    },
                                    "published_at": {
                                      "type": "string"
                                    },
                                    "title": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "title"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Post/UpdateCategory",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Post/UpdateOne": {
      "get": {
        "description": "```graphql\nquery MyQuery($id: Int = 10) {\n  data:main_findManyadmin_user(where: {id: {equals: $id}}) {\n    case_post {\n      cate\n      content\n      id\n      poster\n      published_at\n      title\n    }\n  }\n} \n```",
        "operationId": "/operations/Post/UpdateOne",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "case_post": {
                                "items": {
                                  "properties": {
                                    "cate": {
                                      "type": "integer"
                                    },
                                    "content": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "poster": {
                                      "type": "string"
                                    },
                                    "published_at": {
                                      "type": "string"
                                    },
                                    "title": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "title"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Post/UpdateOne",
        "tags": [
          "Post"
        ]
      }
    },
    "/operations/Statistics/MonthlySales": {
      "get": {
        "description": "```graphql\nquery MyQuery {\n\tdata: statistics_GetMonthlySales {\n\t\tmonths\n\t\ttotalSales\n\t}\n}\n \n```",
        "operationId": "/operations/Statistics/MonthlySales",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "months": {
                                "type": "string"
                              },
                              "totalSales": {
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Statistics/MonthlySales",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/operations/Statistics/QueryRaw": {
      "post": {
        "description": "```graphql\nmutation QueryRaw ($query: String!) {\n\tmain_queryRaw(query: $query)\n}\n\n```",
        "operationId": "/operations/Statistics/QueryRaw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "query": {
                    "type": "string"
                  }
                },
                "required": [
                  "query"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "main_queryRaw": {
                          "pattern": "^\\[([\\s\\S]*?)\\]$|^{([\\s\\S]*?)}$\n"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/Statistics/QueryRaw",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/operations/Statistics/SaleTypePercent": {
      "get": {
        "description": "```graphql\nquery MyQuery {\n  data: statistics_GetSaleTypePercent {\n    totalSales\n    typeId\n    typeName\n  }\n}\n```",
        "operationId": "/operations/Statistics/SaleTypePercent",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "totalSales": {
                                "type": "number"
                              },
                              "typeId": {
                                "type": "integer"
                              },
                              "typeName": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Statistics/SaleTypePercent",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/operations/Statistics/SalesTop10": {
      "get": {
        "description": "```graphql\nquery MyQuery {\n  data: statistics_GetSalesTop10 {\n    shopName\n    totalSales\n  }\n} \n```",
        "operationId": "/operations/Statistics/SalesTop10",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "shopName": {
                                "type": "string"
                              },
                              "totalSales": {
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Statistics/SalesTop10",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/operations/Statistics/VisitTrending": {
      "get": {
        "description": "```graphql\nquery MyQuery {\n  data: statistics_GetVisitTrending {\n    count\n    days\n  }\n}\n```",
        "operationId": "/operations/Statistics/VisitTrending",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "count": {
                                "type": "integer"
                              },
                              "days": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/Statistics/VisitTrending",
        "tags": [
          "Statistics"
        ]
      }
    },
    "/operations/System/GetMenus": {
      "get": {
        "description": "```graphql\nquery MyQuery ($pid: Int) @rbac(requireMatchAny: [admin]) {\n\tdata: main_findManycase_menu(where: {level:{equals:1}}, orderBy: {sort:asc}) {\n\t\tid @export(as: \"pid\")\n\t\tpath\n\t\tlabel\n\t\tname\n\t\tsort\n\t\tchildren: _join @transform(get: \"main_findManycase_menu\") {\n\t\t\tmain_findManycase_menu(where: {parentId:{equals:$pid}}, orderBy: {sort:asc}) {\n\t\t\t\tid\n\t\t\t\tpath\n\t\t\t\tname\n\t\t\t\tlabel\n\t\t\t\tsort\n\t\t\t}\n\t\t}\n\t}\n}\n \n```",
        "operationId": "/operations/System/GetMenus",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "children": {
                                "items": {
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "label": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "path": {
                                      "type": "string"
                                    },
                                    "sort": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "label",
                                    "sort"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "label": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "sort": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "id",
                              "label",
                              "sort"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/GetMenus",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Log/ChangeOpen": {
      "post": {
        "description": "```graphql\nmutation MyQuery($set: Boolean = false) @rbac(requireMatchAny: [admin, user]) {\n  data:main_updateOneadmin_dic(where: {id: 1}, data: {isOpen: {set: $set}}) {\n    id\n    isOpen\n  }\n}\n```",
        "operationId": "/operations/System/Log/ChangeOpen",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "set": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "isOpen": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "id",
                            "isOpen"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Log/ChangeOpen",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Log/CreateLog": {
      "post": {
        "description": "```graphql\nmutation MyQuery($ip: String = \"\", $method: String = \"\", $path: String = \"\", $updatedAt: DateTime = \"\", $code: String = \"\", $ua: String = \"\", $userId: String = \"\", $userName: String = \"\") {\n  data:main_createOneadmin_apilog(\n    data: {updatedAt: $updatedAt, ip: $ip, method: $method, path: $path, code: $code, ua: $ua, userId: $userId, userName: $userName}\n  ) {\n    ip\n    method\n    path\n    id\n    updatedAt\n    ua\n    userId\n    userName\n  }\n} \n```",
        "operationId": "/operations/System/Log/CreateLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "ip": {
                    "type": "string"
                  },
                  "method": {
                    "type": "string"
                  },
                  "path": {
                    "type": "string"
                  },
                  "ua": {
                    "type": "string"
                  },
                  "updatedAt": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "userName": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "ip": {
                              "type": "string"
                            },
                            "method": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "ua": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "string"
                            },
                            "userId": {
                              "type": "string"
                            },
                            "userName": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "ip",
                            "method",
                            "path",
                            "id",
                            "updatedAt",
                            "ua",
                            "userId",
                            "userName"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/Log/CreateLog",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Log/DeleteLog": {
      "post": {
        "description": "```graphql\nmutation MyQuery($equals: [Int] = 10) @rbac(requireMatchAny: [admin, user]) {\n  main_deleteManyadmin_apilog(where: {id: {in: $equals}}) {\n    count\n  }\n}\n```",
        "operationId": "/operations/System/Log/DeleteLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "equals": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "main_deleteManyadmin_apilog": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Log/DeleteLog",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Log/DeleteOne": {
      "post": {
        "description": "```graphql\nmutation MyQuery($id: Int!) @rbac(requireMatchAny: [admin]) {\n  data:main_deleteOneadmin_apilog(where: {id: $id}) {\n    id\n  }\n}\n```",
        "operationId": "/operations/System/Log/DeleteOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Log/DeleteOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Log/GetAllLog": {
      "get": {
        "description": "```graphql\nquery MyQuery {\n  logNum: main_aggregateadmin_apilog {\n    _count {\n      id\n    }\n  }\n}\n```",
        "operationId": "/operations/System/Log/GetAllLog",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "logNum": {
                          "properties": {
                            "_count": {
                              "properties": {
                                "id": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "logNum"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Log/GetAllLog",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Log/GetLikeLog": {
      "get": {
        "description": "```graphql\nquery MyQuery($ip: String = \"\", $method: String = \"\", $path: String = \"\", $id: Int = 10, $name: String = \"\") {\n  main_findManyadmin_apilog(\n    where: {method: {contains: $method}, path: {contains: $path}, updatedAt: {}, ip: {contains: $ip}, userName: {contains: $name}}\n  ) {\n    id\n    method\n    ip\n    path\n    ua\n    updatedAt\n    userName\n  }\n  main_findUniqueadmin_apilog(where: {id: $id}) {\n    id\n    ip\n    method\n    path\n    ua\n    updatedAt\n    userName\n  }\n}\n```",
        "operationId": "/operations/System/Log/GetLikeLog",
        "parameters": [
          {
            "in": "query",
            "name": "ip",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "method",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "main_findManyadmin_apilog": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "ip": {
                                "type": "string"
                              },
                              "method": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "ua": {
                                "type": "string"
                              },
                              "updatedAt": {
                                "type": "string"
                              },
                              "userName": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "method",
                              "ip",
                              "path",
                              "ua",
                              "updatedAt",
                              "userName"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "main_findUniqueadmin_apilog": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "ip": {
                              "type": "string"
                            },
                            "method": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "ua": {
                              "type": "string"
                            },
                            "updatedAt": {
                              "type": "string"
                            },
                            "userName": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "ip",
                            "method",
                            "path",
                            "ua",
                            "updatedAt",
                            "userName"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "main_findManyadmin_apilog"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Log/GetLikeLog",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Log/GetLog": {
      "get": {
        "description": "```graphql\nquery MyQuery($skip: Int = 5, $take: Int = 10, $orderBy: [main_admin_apilogOrderByWithRelationInput]) {\n  data: main_findManyadmin_apilog(skip: $skip, take: $take, orderBy: $orderBy) {\n    id\n    method\n    ip\n    path\n    updatedAt\n    ua\n    userName\n    userId\n  }\n}\n```",
        "operationId": "/operations/System/Log/GetLog",
        "parameters": [
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/main_admin_apilogOrderByWithRelationInput"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "ip": {
                                "type": "string"
                              },
                              "method": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "ua": {
                                "type": "string"
                              },
                              "updatedAt": {
                                "type": "string"
                              },
                              "userId": {
                                "type": "string"
                              },
                              "userName": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "method",
                              "ip",
                              "path",
                              "updatedAt",
                              "ua",
                              "userName",
                              "userId"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Log/GetLog",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/CreateOne": {
      "post": {
        "description": "```graphql\nmutation CreateOneMenu($label: String!, $path: String!, $icon: String, $level: Int!, $sort: Int!, $parentId: Int, $menuType: String!, $perms: String = \"\", $apiId: String = \"\", $create_time: DateTime! @injectCurrentDateTime(format: ISO8601)) @rbac(requireMatchAny: [admin, b1a23, a231, abc1]) {\n  data: main_createOnecase_menu(\n    data: {label: $label, path: $path, icon: $icon, level: $level, sort: $sort, parentId: $parentId, menu_type: $menuType, perms: $perms, api_id: $apiId, create_time: $create_time}\n  ) {\n    id\n  }\n}\n```",
        "operationId": "/operations/System/Menu/CreateOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "apiId": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "level": {
                    "type": "integer"
                  },
                  "menuType": {
                    "type": "string"
                  },
                  "parentId": {
                    "type": "integer"
                  },
                  "path": {
                    "type": "string"
                  },
                  "perms": {
                    "type": "string"
                  },
                  "sort": {
                    "type": "integer"
                  }
                },
                "required": [
                  "label",
                  "path",
                  "level",
                  "sort",
                  "menuType"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Menu/CreateOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/DeleteMany": {
      "post": {
        "description": "```graphql\nmutation DeleteManyMenu ($ids: [Int]!) @rbac(requireMatchAny: [admin]) {\n\tdata: main_deleteManycase_menu(where: {id:{in:$ids}}) {\n\t\tcount\n\t}\n}\n\n```",
        "operationId": "/operations/System/Menu/DeleteMany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ids": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "ids"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Menu/DeleteMany",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/DeleteOne": {
      "get": {
        "description": "```graphql\nquery MyQuery($menuIds: [Int]!) @rbac(requireMatchAny: [admin]) {\n  data: main_findManycase_menu(where: {id: {in: $menuIds}}) @transform(get: \"[].api_id\") {\n    api_id\n  }\n}\n```",
        "operationId": "/operations/System/Menu/DeleteOne",
        "parameters": [
          {
            "in": "query",
            "name": "menuIds",
            "required": true,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Menu/DeleteOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/GetApiList": {
      "get": {
        "description": "```graphql\nquery MyQuery @rbac(requireMatchAny: [admin]) {\n  data: system_getAllApis {\n    path: title\n    id\n  }\n}\n```",
        "operationId": "/operations/System/Menu/GetApiList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "path": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Menu/GetApiList",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/GetApisByMenus": {
      "get": {
        "description": "```graphql\nquery MyQuery($menuIds: [Int]!) @rbac(requireMatchAny: [admin]) {\n  data: main_findManycase_menu(where: {id: {in: $menuIds}}) @transform(get: \"[].api_id\") {\n    api_id\n  }\n} \n```",
        "operationId": "/operations/System/Menu/GetApisByMenus",
        "parameters": [
          {
            "in": "query",
            "name": "menuIds",
            "required": true,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Menu/GetApisByMenus",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/GetChildrenMenus": {
      "get": {
        "description": "```graphql\nquery MyQuery($pid: Int!) @rbac(requireMatchAny: [admin]) {\n  data: main_findManycase_menu(where: {parentId: {equals: $pid}}) {\n    id\n    label\n    level\n    name\n    path\n    sort\n  }\n}\n```",
        "operationId": "/operations/System/Menu/GetChildrenMenus",
        "parameters": [
          {
            "in": "query",
            "name": "pid",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "label": {
                                "type": "string"
                              },
                              "level": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "sort": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "id",
                              "label",
                              "level",
                              "sort"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Menu/GetChildrenMenus",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/GetList": {
      "get": {
        "description": "```graphql\nquery GetMenuList($take: Int = 10, $skip: Int = 0, $orderBy: [main_case_menuOrderByWithRelationInput], $query: main_case_menuWhereInput) @rbac(requireMatchAny: [admin]) {\n  data: main_findManycase_menu(\n    skip: $skip\n    take: $take\n    orderBy: $orderBy\n    where: {AND: $query}\n  ) {\n    id\n    parentId\n    label\n    path\n    icon\n    sort\n    level\n  }\n  total: main_aggregatecase_menu(where: {AND: $query}) @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n} \n```",
        "operationId": "/operations/System/Menu/GetList",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/main_case_menuOrderByWithRelationInput"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "$ref": "#/components/schemas/main_case_menuWhereInput"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "icon": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "label": {
                                "type": "string"
                              },
                              "level": {
                                "type": "integer"
                              },
                              "parentId": {
                                "type": "integer"
                              },
                              "path": {
                                "type": "string"
                              },
                              "sort": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "id",
                              "label",
                              "sort",
                              "level"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "total": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Menu/GetList",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/GetMany": {
      "get": {
        "description": "```graphql\nquery GetManyMenu @rbac(requireMatchAny: [admin]) {\n  data: main_findManycase_menu {\n    id\n    parentId\n    label\n    path\n    icon\n    sort\n    level\n    is_bottom\n    menu_type\n    perms\n    api_id\n    create_time\n  }\n}\n```",
        "operationId": "/operations/System/Menu/GetMany",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "api_id": {
                                "type": "string"
                              },
                              "create_time": {
                                "type": "string"
                              },
                              "icon": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "is_bottom": {
                                "type": "integer"
                              },
                              "label": {
                                "type": "string"
                              },
                              "level": {
                                "type": "integer"
                              },
                              "menu_type": {
                                "type": "string"
                              },
                              "parentId": {
                                "type": "integer"
                              },
                              "path": {
                                "type": "string"
                              },
                              "perms": {
                                "type": "string"
                              },
                              "sort": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "id",
                              "label",
                              "sort",
                              "level",
                              "is_bottom"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Menu/GetMany",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/GetMenuByLevelOrPid": {
      "get": {
        "description": "```graphql\nquery MyQuery($level: Int, $pid: Int) {\n  data: main_findManycase_menu(where: {OR: [{level: {equals: $level}}, {parentId: {equals: $pid}}]}) {\n    id\n    label\n    is_bottom\n  }\n}\n```",
        "operationId": "/operations/System/Menu/GetMenuByLevelOrPid",
        "parameters": [
          {
            "in": "query",
            "name": "level",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pid",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "is_bottom": {
                                "type": "integer"
                              },
                              "label": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "label",
                              "is_bottom"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Menu/GetMenuByLevelOrPid",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/GetOne": {
      "get": {
        "description": "```graphql\nquery GetOneMenu ($id: Int!) @rbac(requireMatchAny: [admin,b1a23,a231,abc1]) {\n\tdata: main_findFirstcase_menu(where: {id:{equals:$id}}) {\n\t\tid\n\t\tparentId\n\t\tlabel\n\t\tpath\n\t\ticon\n\t\tsort\n\t\tlevel\n\t}\n}\n\n```",
        "operationId": "/operations/System/Menu/GetOne",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "icon": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "label": {
                              "type": "string"
                            },
                            "level": {
                              "type": "integer"
                            },
                            "parentId": {
                              "type": "integer"
                            },
                            "path": {
                              "type": "string"
                            },
                            "sort": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id",
                            "label",
                            "sort",
                            "level"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Menu/GetOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Menu/UpdateOne": {
      "post": {
        "description": "```graphql\nmutation UpdateOneMenu($id: Int!, $label: String, $path: String, $icon: String, $sort: Int, $level: Int, $parentId: Int ) @rbac(requireMatchAny: [eeee, admin, b1a23, a231, abc1]) {\n  data: main_updateOnecase_menu(\n    data: {label: {set: $label}, path: {set: $path}, icon: {set: $icon}, sort: {set: $sort}, level: {set: $level}, parentId: {set: $parentId}}\n    where: {id: $id}\n  ) {\n    id\n    parentId\n    label\n    path\n    icon\n    sort\n    level\n  }\n}\n```",
        "operationId": "/operations/System/Menu/UpdateOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "icon": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "label": {
                    "type": "string"
                  },
                  "level": {
                    "type": "integer"
                  },
                  "parentId": {
                    "type": "integer"
                  },
                  "path": {
                    "type": "string"
                  },
                  "sort": {
                    "type": "integer"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "icon": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "label": {
                              "type": "string"
                            },
                            "level": {
                              "type": "integer"
                            },
                            "parentId": {
                              "type": "integer"
                            },
                            "path": {
                              "type": "string"
                            },
                            "sort": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id",
                            "label",
                            "sort",
                            "level"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Menu/UpdateOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Operation/GetMany": {
      "post": {
        "description": "```graphql\nmutation UpdateOneMenu($id: Int!, $label: String, $path: String, $icon: String, $sort: Int, $level: Int, $parentId: Int ) @rbac(requireMatchAny: [eeee, admin, b1a23, a231, abc1]) {\n  data: main_updateOnecase_menu(\n    data: {label: {set: $label}, path: {set: $path}, icon: {set: $icon}, sort: {set: $sort}, level: {set: $level}, parentId: {set: $parentId}}\n    where: {id: $id}\n  ) {\n    id\n    parentId\n    label\n    path\n    icon\n    sort\n    level\n  }\n}\n```",
        "operationId": "/operations/System/Operation/GetMany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "icon": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "label": {
                    "type": "string"
                  },
                  "level": {
                    "type": "integer"
                  },
                  "parentId": {
                    "type": "integer"
                  },
                  "path": {
                    "type": "string"
                  },
                  "sort": {
                    "type": "integer"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "icon": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "label": {
                              "type": "string"
                            },
                            "level": {
                              "type": "integer"
                            },
                            "parentId": {
                              "type": "integer"
                            },
                            "path": {
                              "type": "string"
                            },
                            "sort": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id",
                            "label",
                            "sort",
                            "level"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Operation/GetMany",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Perm/CreateMany": {
      "post": {
        "description": "```graphql\nmutation MyQuery ($data: [main_admin_permissionCreateManyInput]!) @rbac(requireMatchAny: [admin]) {\n\tdata: main_createManyadmin_permission(skipDuplicates: true, data: $data) {\n\t\tcount\n\t}\n}\n\n```",
        "operationId": "/operations/System/Perm/CreateMany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "definitions": {
                  "main_admin_permissionCreateManyInput": {
                    "properties": {
                      "createdAt": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "enabled": {
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "id": {
                        "type": "string"
                      },
                      "method": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "updatedAt": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "properties": {
                  "data": {
                    "items": {
                      "$ref": "#/components/schemas/main_admin_permissionCreateManyInput"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Perm/CreateMany",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Perm/GetBindPerms": {
      "get": {
        "description": "```graphql\nquery MyQuery {\n  data: main_findManyadmin_permission {\n    createdAt\n    enabled\n    method\n    path\n  }\n}\n```",
        "operationId": "/operations/System/Perm/GetBindPerms",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "createdAt": {
                                "type": "string"
                              },
                              "enabled": {
                                "type": "integer"
                              },
                              "method": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "enabled",
                              "method",
                              "path"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Perm/GetBindPerms",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Perm/GetRolePerms": {
      "get": {
        "description": "```graphql\nquery MyQuery($code: [String]!, $roleId: Int @internal, $menuId: Int @internal) {\n  data: main_findManyadmin_role(where: {code: {in: $code}}) {\n    id @export(as: \"roleId\")\n    _join {\n      data: main_findManyadmin_menu_role(where: {role_id: {equals: $roleId}}) @transform(get: \"[]._join.main_findFirstcase_menu.perms\") {\n        menu_id @export(as: \"menuId\")\n        _join {\n          main_findFirstcase_menu(where: {id: {equals: $menuId}}) {\n            perms\n          }\n        }\n      }\n    }\n  }\n} \n```",
        "operationId": "/operations/System/Perm/GetRolePerms",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "_join": {
                                "properties": {
                                  "data": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "id",
                              "_join"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Perm/GetRolePerms",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/AddOne": {
      "post": {
        "description": "```graphql\nmutation MyQuery ($code: String!, $remark: String!) @rbac(requireMatchAny: [user,eeee,admin,b1a23,a231,abc1]) {\n\tdata: main_createOneadmin_role(data: {code:$code,remark:$remark}) {\n\t\tid\n\t\tcode\n\t\tremark\n\t}\n}\n\n```",
        "operationId": "/operations/System/Role/AddOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "remark": {
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "remark"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "remark": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "code",
                            "remark"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Role/AddOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/BindMenus": {
      "post": {
        "description": "```graphql\nmutation MyQuery($data: [main_admin_menu_roleCreateManyInput]!) {\n  data: main_createManyadmin_menu_role(data: $data) {\n    count\n  }\n}\n```",
        "operationId": "/operations/System/Role/BindMenus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "definitions": {
                  "main_admin_menu_roleCreateManyInput": {
                    "properties": {
                      "id": {
                        "type": [
                          "integer",
                          "null"
                        ]
                      },
                      "menu_id": {
                        "type": "integer"
                      },
                      "role_id": {
                        "type": "integer"
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "properties": {
                  "data": {
                    "items": {
                      "$ref": "#/components/schemas/main_admin_menu_roleCreateManyInput"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/Role/BindMenus",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/BindRoleApis": {
      "post": {
        "description": "```graphql\nmutation BindRoleApis($allRoles: [String]!, $apis: [Int]!, $roleCode: String!) {\n  system_bindRoleApis(POSTApiV1RoleBindApiInput: {apis: $apis, allRoles: $allRoles, roleCode: $roleCode}) {\n    count\n  }\n}\n\n```",
        "operationId": "/operations/System/Role/BindRoleApis",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allRoles": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "apis": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "roleCode": {
                    "type": "string"
                  }
                },
                "required": [
                  "allRoles",
                  "apis",
                  "roleCode"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "system_bindRoleApis": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/Role/BindRoleApis",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/DeleteMany": {
      "post": {
        "description": "```graphql\nmutation MyQuery($ids: [Int]) {\n  data: main_deleteManyadmin_role(where: {id: {in: $ids}}) {\n    count\n  }\n  data1:main_deleteManyadmin_role_user(where: {role_id: {in: $ids}}) {\n    count\n  }\n  data2:main_deleteManyadmin_menu_role(where: {role_id: {in: $ids}}) {\n    count\n  }\n}\n```",
        "operationId": "/operations/System/Role/DeleteMany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ids": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        },
                        "data1": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        },
                        "data2": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/Role/DeleteMany",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/DeleteOne": {
      "post": {
        "description": "```graphql\nmutation MyQuery($code: String!) @rbac(requireMatchAny: [user, eeee, admin, b1a23, a231, abc1]) {\n  data: main_deleteOneadmin_role(where: {code: $code}) {\n    id @export(as: \"role_id\")\n  }\n  \n}\n```",
        "operationId": "/operations/System/Role/DeleteOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "type": "string"
                  }
                },
                "required": [
                  "code"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Role/DeleteOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/GetList": {
      "get": {
        "description": "```graphql\nquery GetRoleList ($take: Int = 10, $skip: Int = 0, $orderBy: [main_admin_roleOrderByWithRelationInput], $query: main_admin_roleWhereInput) @rbac(requireMatchAny: [user,admin,b1a23,a231,abc1]) {\n\tdata: main_findManyadmin_role(skip: $skip, take: $take, orderBy: $orderBy, where: {AND:$query}) {\n\t\tid\n\t\tcode\n\t\tremark\n\t}\n\ttotal: main_aggregateadmin_role(where: {AND:$query}) @transform(get: \"_count.id\") {\n\t\t_count {\n\t\t\tid\n\t\t}\n\t}\n}\n\n```",
        "operationId": "/operations/System/Role/GetList",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "$ref": "#/components/schemas/main_admin_roleWhereInput"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/main_admin_roleOrderByWithRelationInput"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "remark": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "code",
                              "remark"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "total": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Role/GetList",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/GetMany": {
      "get": {
        "description": "```graphql\nquery MyQuery {\n  data: main_findManyadmin_role {\n    code\n    remark\n    id\n  }\n}\n```",
        "operationId": "/operations/System/Role/GetMany",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "remark": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "code",
                              "remark",
                              "id"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Role/GetMany",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/GetOne": {
      "get": {
        "description": "```graphql\nquery MyQuery ($id: Int!) @rbac(requireMatchAny: [user,eeee,admin,b1a23,a231,abc1]) {\n\tdata: main_findFirstadmin_role(where: {id:{equals:$id}}) {\n\t\tcode\n\t}\n}\n\n```",
        "operationId": "/operations/System/Role/GetOne",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "code"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/Role/GetOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/GetRoleMenuId": {
      "get": {
        "description": "```graphql\nquery MyQuery($roleId: Int!) {\n  data: main_findManyadmin_menu_role(where: {role_id: {equals: $roleId}}) @transform(get: \"[].menu_id\") {\n    menu_id\n  }\n}\n```",
        "operationId": "/operations/System/Role/GetRoleMenuId",
        "parameters": [
          {
            "in": "query",
            "name": "roleId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "type": "integer"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Role/GetRoleMenuId",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/UnBindMenus": {
      "post": {
        "description": "```graphql\nmutation MyQuery($roleId: Int!, $menuIds: [Int]!) {\n  main_deleteManyadmin_menu_role(\n    where: {role_id: {equals: $roleId}, menu_id: {in: $menuIds}}\n  ) {\n    count\n  }\n}\n```",
        "operationId": "/operations/System/Role/UnBindMenus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "menuIds": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "roleId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "roleId",
                  "menuIds"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "main_deleteManyadmin_menu_role": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "count"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/Role/UnBindMenus",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/UnBindRoleApis": {
      "post": {
        "description": "```graphql\nmutation MyQuery($apis: [Int]!, $roleCode: String!) {\n  system_unBindRoleApis(\n    POSTApiV1RoleUnbindApiInput: {roleCode: $roleCode, apis: $apis}\n  ) {\n    count\n  }\n}\n```",
        "operationId": "/operations/System/Role/UnBindRoleApis",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "apis": {
                    "items": {
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "roleCode": {
                    "type": "string"
                  }
                },
                "required": [
                  "apis",
                  "roleCode"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "system_unBindRoleApis": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/Role/UnBindRoleApis",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Role/UpdateOne": {
      "post": {
        "description": "```graphql\nmutation MyQuery ($remark: String, $id: Int!) @rbac(requireMatchAny: [user,eeee,admin,b1a23,a231,abc1]) {\n\tdata: main_updateOneadmin_role(data: {remark:{set:$remark}}, where: {id:$id}) {\n\t\tcode\n\t\tid\n\t\tremark\n\t}\n}\n\n```",
        "operationId": "/operations/System/Role/UpdateOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "remark": {
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "remark": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "code",
                            "id",
                            "remark"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/Role/UpdateOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/Sub/SSE": {
      "get": {
        "description": "```graphql\nquery MyQuery($roles: String!) {\n  data: main_findManycase_sub(where: {target_role: {equals: $roles}}) {\n    message\n    updatedAt\n    target_role\n    create_role\n    id\n    type\n  }\n}\n```",
        "operationId": "/operations/System/Sub/SSE",
        "parameters": [
          {
            "in": "query",
            "name": "roles",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "create_role": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "message": {
                                "type": "string"
                              },
                              "target_role": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "updatedAt": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "message",
                              "updatedAt",
                              "target_role",
                              "create_role",
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/Sub/SSE",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/ConnectRole": {
      "post": {
        "description": "```graphql\nmutation MyQuery($userId: Int!, $roleId: Int!) {\n  data: main_createOneadmin_role_user(data: {role_id: $roleId, user_id: $userId}) {\n    id\n  }\n}\n```",
        "operationId": "/operations/System/User/ConnectRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "roleId": {
                    "type": "integer"
                  },
                  "userId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "userId",
                  "roleId"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/User/ConnectRole",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/CountUsers": {
      "get": {
        "description": "```graphql\nquery MyQuery @rbac(requireMatchAny: [admin]) {\n\tdata: main_aggregateadmin_user {\n\t\tcount: _count {\n\t\t\tid\n\t\t}\n\t}\n}\n\n```",
        "operationId": "/operations/System/User/CountUsers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "count": {
                              "properties": {
                                "id": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/User/CountUsers",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/CreateOne": {
      "post": {
        "description": "```graphql\nmutation MyQuery ($countryCode: String = \"CN\", $name: String!, $password: String = \"\", $passwordType: String = \"plain\", $phone: String!) @rbac(requireMatchAny: [user,eeee,admin,b1a23,a231,abc1]) {\n\tdata: casdoor_apiAddUser(POSTApiAdd_userInput: {phone:$phone,name:$name,password:$password,passwordType:$passwordType,countryCode:$countryCode}) {\n\t\tmsg\n\t\tstatus\n\t}\n}\n\n```",
        "operationId": "/operations/System/User/CreateOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "countryCode": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "passwordType": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "phone"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "msg": {
                              "type": "string"
                            },
                            "status": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/User/CreateOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/DeleteOne": {
      "post": {
        "description": "```graphql\nmutation MyQuery ($id: Int = 10) @rbac(requireMatchAny: [admin,b1a23,a231,abc1]) {\n\tmain_deleteOneadmin_user(where: {id:$id}) {\n\t\tid\n\t\tname\n\t\tpassword\n\t\tpassword_salt\n\t\tpassword_type\n\t\tphone\n\t\tuser_id\n\t}\n}\n\n```",
        "operationId": "/operations/System/User/DeleteOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "main_deleteOneadmin_user": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "password": {
                              "type": "string"
                            },
                            "password_salt": {
                              "type": "string"
                            },
                            "password_type": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            },
                            "user_id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "POST /operations/System/User/DeleteOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/DisconnectRole": {
      "post": {
        "description": "```graphql\nmutation MyQuery($roleId: Int!, $userId: Int = 10) {\n  data: main_deleteOneadmin_role_user(\n    where: {role_id_user_id: {role_id: $roleId, user_id: $userId}}\n  ) {\n    id\n  }\n} \n```",
        "operationId": "/operations/System/User/DisconnectRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "roleId": {
                    "type": "integer"
                  },
                  "userId": {
                    "type": "integer"
                  }
                },
                "required": [
                  "roleId"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/User/DisconnectRole",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/GetAllList": {
      "get": {
        "description": "```graphql\nquery MyQuery() @rbac(requireMatchAny: [admin]) {\n  data:main_aggregateadmin_user {\n    _count {\n      id\n    \n    }\n  }\n}\n```",
        "operationId": "/operations/System/User/GetAllList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "_count": {
                              "properties": {
                                "id": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/User/GetAllList",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/GetLikeUser": {
      "get": {
        "description": "```graphql\nquery MyQuery($name: String = \"\", $phone: String = \"\", $id: Int = 10, $userId: Int @internal, $roleId: Int @internal) {\n  data:main_findManyadmin_user(\n    where: {name: {contains: $name, endsWith: \"\"}, phone: {endsWith: \"\", contains: $phone}}\n  ) {\n    id @export(as: \"userId\")\n    name\n    phone\n    createdAt: created_at\n    avatar\n    user_role: _join {\n      data:main_findManyadmin_role_user(where: {user_id: {equals: $userId}}) {\n        role_id @export(as: \"roleId\")\n        role: _join {\n          main_findManyadmin_role(where: {id: {equals: $roleId}}) {\n            code\n            id\n            remark\n          }\n        }\n      }\n    }\n  }\n  data1:main_findUniqueadmin_user(where: {id: $id}) {\n    id\n    name\n    phone\n   createdAt: created_at\n    avatar\n  }\n}\n```",
        "operationId": "/operations/System/User/GetLikeUser",
        "parameters": [
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "avatar": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "phone": {
                                "type": "string"
                              },
                              "user_role": {
                                "properties": {
                                  "data": {
                                    "items": {
                                      "properties": {
                                        "role": {
                                          "properties": {
                                            "main_findManyadmin_role": {
                                              "items": {
                                                "properties": {
                                                  "code": {
                                                    "type": "string"
                                                  },
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "remark": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "code",
                                                  "id",
                                                  "remark"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "required": [
                                            "main_findManyadmin_role"
                                          ],
                                          "type": "object"
                                        },
                                        "role_id": {
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "role_id",
                                        "role"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "user_role"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "data1": {
                          "properties": {
                            "avatar": {
                              "type": "string"
                            },
                            "createdAt": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/User/GetLikeUser",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/GetList": {
      "get": {
        "description": "```graphql\nquery MyQuery($skip: Int!, $take: Int!, $query: main_admin_userWhereInput = {}, $orderBy: [main_admin_userOrderByWithRelationInput], $userId: Int, $roleId: Int) @rbac(requireMatchAny: [user, admin, b1a23, a231, abc1]) {\n  data: main_findManyadmin_user(\n    skip: $skip\n    take: $take\n    where: {AND: $query}\n    orderBy: $orderBy\n  ) {\n    id @export(as: \"userId\")\n    name\n    avatar\n    createdAt: created_at\n    _join {\n      main_findManyadmin_role_user(where: {user_id: {equals: $userId}}) {\n        role_id @export(as: \"roleId\")\n        user_id\n        _join {\n          main_findManyadmin_role(where: {id: {equals: $roleId}}) {\n            id\n            remark\n            code\n          }\n        }\n      }\n    }\n    phone\n    user_id\n  }\n}\n```",
        "operationId": "/operations/System/User/GetList",
        "parameters": [
          {
            "in": "query",
            "name": "roleId",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "take",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/main_admin_userOrderByWithRelationInput"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "$ref": "#/components/schemas/main_admin_userWhereInput"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "_join": {
                                "properties": {
                                  "main_findManyadmin_role_user": {
                                    "items": {
                                      "properties": {
                                        "_join": {
                                          "properties": {
                                            "main_findManyadmin_role": {
                                              "items": {
                                                "properties": {
                                                  "code": {
                                                    "type": "string"
                                                  },
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "remark": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "id",
                                                  "remark",
                                                  "code"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "required": [
                                            "main_findManyadmin_role"
                                          ],
                                          "type": "object"
                                        },
                                        "role_id": {
                                          "type": "integer"
                                        },
                                        "user_id": {
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "role_id",
                                        "user_id",
                                        "_join"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "main_findManyadmin_role_user"
                                ],
                                "type": "object"
                              },
                              "avatar": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "phone": {
                                "type": "string"
                              },
                              "user_id": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "_join"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/User/GetList",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/GetOne": {
      "get": {
        "description": "```graphql\nquery MyQuery($name: String, $phone: String, $userId: Int, $roleId: Int) @rbac(requireMatchAny: [user, eeee, admin, b1a23, a231, abc1]) {\n  data: main_findFirstadmin_user(\n    where: {OR: [{name: {equals: $name}}, {phone: {equals: $phone}}]}\n  ) {\n    id @export(as: \"userId\")\n    avatar\n    roles: _join @transform(get: \"main_findManyadmin_role_user\") {\n      main_findManyadmin_role_user(where: {user_id: {equals: $userId}}) @transform(get: \"[]._join.main_findFirstadmin_role.code\") {\n        role_id @export(as: \"roleId\")\n        _join {\n          main_findFirstadmin_role(where: {id: {equals: $roleId}}) {\n            code\n          }\n        }\n      }\n    }\n    name\n    phone\n    user_id\n  }\n}\n```",
        "operationId": "/operations/System/User/GetOne",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "roleId",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "properties": {
                            "avatar": {
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            },
                            "roles": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "user_id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/User/GetOne",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/GetRoleUsers": {
      "get": {
        "description": "```graphql\nquery MyQuery($roleId: Int @internal, $userId: Int @internal, $code: String!) {\n  data:main_findManyadmin_role(where: {code: {equals: $code}}) {\n    id @export(as: \"roleId\")\n    remark\n    code\n    role:_join {\n      main_findManyadmin_role_user(where: {role_id: {equals: $roleId}}) {\n        role_id\n        user_id @export(as: \"userId\")\n        _join {\n          user:main_findManyadmin_user(where: {id: {equals: $userId}}) {\n            id\n            name\n            avatar\n            created_at\n          }\n        }\n      }\n    }\n  }\n}\n```",
        "operationId": "/operations/System/User/GetRoleUsers",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "remark": {
                                "type": "string"
                              },
                              "role": {
                                "properties": {
                                  "main_findManyadmin_role_user": {
                                    "items": {
                                      "properties": {
                                        "_join": {
                                          "properties": {
                                            "user": {
                                              "items": {
                                                "properties": {
                                                  "avatar": {
                                                    "type": "string"
                                                  },
                                                  "created_at": {
                                                    "type": "string"
                                                  },
                                                  "id": {
                                                    "type": "integer"
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "id",
                                                  "name"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "required": [
                                            "user"
                                          ],
                                          "type": "object"
                                        },
                                        "role_id": {
                                          "type": "integer"
                                        },
                                        "user_id": {
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "role_id",
                                        "user_id",
                                        "_join"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "main_findManyadmin_role_user"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "id",
                              "remark",
                              "code",
                              "role"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/User/GetRoleUsers",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/GetUserByUserId": {
      "get": {
        "description": "```graphql\nquery MyQuery($userId: String = \"\") @rbac(requireMatchAny: [admin, user]) {\n  data:main_findManyadmin_user(where: {user_id: {equals: $userId}}) {\n    id\n    name\n    phone\n    avatar\n    user_id\n  }\n}\n```",
        "operationId": "/operations/System/User/GetUserByUserId",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "avatar": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "phone": {
                                "type": "string"
                              },
                              "user_id": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "JWT": [
              "admin",
              "user",
              "eeee",
              "aaaa",
              "aa",
              "editer",
              "admin1",
              "ac",
              "b1a23",
              "a231",
              "abc",
              "abc1",
              "abc32"
            ]
          }
        ],
        "summary": "GET /operations/System/User/GetUserByUserId",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/GetUserInfo": {
      "get": {
        "description": "```graphql\nquery MyQuery($equals: String = \"\") {\n  data:main_findManyadmin_user(where: {name: {equals: $equals}}) {\n    avatar\n    country_code\n    created_at\n    id\n    name\n    phone\n    user_id\n  }\n} \n```",
        "operationId": "/operations/System/User/GetUserInfo",
        "parameters": [
          {
            "in": "query",
            "name": "equals",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "avatar": {
                                "type": "string"
                              },
                              "country_code": {
                                "type": "string"
                              },
                              "created_at": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "phone": {
                                "type": "string"
                              },
                              "user_id": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/User/GetUserInfo",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/GetUserRole": {
      "get": {
        "description": "```graphql\nquery MyQuery($userId: Int!, $roleId: Int @internal) {\n  data: main_findManyadmin_role_user(where: {user_id: {equals: $userId}}) @transform(get: \"[].data\") {\n    role_id @export(as: \"roleId\")\n    data: _join @transform(get: \"main_findFirstadmin_role\") {\n      main_findFirstadmin_role(where: {id: {equals: $roleId}}) {\n        remark\n        code\n        id\n      }\n    }\n  }\n}\n```",
        "operationId": "/operations/System/User/GetUserRole",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "remark": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "remark",
                              "code",
                              "id"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "GET /operations/System/User/GetUserRole",
        "tags": [
          "System"
        ]
      }
    },
    "/operations/System/User/UpdateOne": {
      "post": {
        "description": "```graphql\nmutation MyQuery($avatar: String = \"\", $id: Int = 10, $password: String!, $phone: String = \"\", $name: String = \"\", $userId: String!) {\n  casdoor:casdoor_apiUpdateUser(\n    POSTApiUpdate_userInput: {password: $password, name: $name, phone: $phone, userId: $userId}\n  ) {\n    msg\n    status\n  }\n  data:main_updateOneadmin_user(\n    data: {avatar: {set: $avatar}, name: {set: $name}, phone: {set: $phone}}\n    where: {id: $id}\n  ) {\n    avatar\n  }\n}\n```",
        "operationId": "/operations/System/User/UpdateOne",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "avatar": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  }
                },
                "required": [
                  "password",
                  "userId"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "casdoor": {
                          "properties": {
                            "msg": {
                              "type": "string"
                            },
                            "status": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "data": {
                          "properties": {
                            "avatar": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /operations/System/User/UpdateOne",
        "tags": [
          "System"
        ]
      }
    },
    "/s3/tengxunyun/upload": {
      "post": {
        "description": "上传文件到tengxunyun",
        "operationId": "/s3/tengxunyun/upload",
        "parameters": [
          {
            "in": "query",
            "name": "directory",
            "schema": {
              "description": "上传文件目录",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "items": {
                      "format": "binary",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "fileKey": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [],
        "summary": "POST /s3/tengxunyun/upload",
        "tags": [
          "FileUpload"
        ]
      }
    }
  },
  "security": [
    {
      "JWT": [
        "admin",
        "user",
        "eeee",
        "aaaa",
        "aa",
        "editer",
        "admin1",
        "ac",
        "b1a23",
        "a231",
        "abc",
        "abc1",
        "abc32"
      ]
    }
  ],
  "servers": [
    {
      "url": "http://47.101.69.119:9991"
    }
  ]
}